generator client {
  provider = "prisma-client-js"
}

datasource mysql {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  checkLocationOnLogin Boolean              @default(false)
  countryCode          String               @default("us")
  createdAt            DateTime             @default(now())
  gender               Gender               @default(UNKNOWN)
  id                   Int                  @id
  name                 String
  firstName            String?
  lastName             String?
  nationality          String
  birth_date           DateTime?
  currency             Json?
  settings             Json?
  account              String?
  balance              Int                  @default(0)
  available_balance    Int                  @default(0)
  notificationEmail    NotificationEmail    @default(ACCOUNT)
  password             String?
  prefersLanguage      String               @default("en-us")
  prefersColorScheme   PrefersColorScheme   @default(NO_PREFERENCE)
  prefersReducedMotion PrefersReducedMotion @default(NO_PREFERENCE)
  prefersEmailId       Int?
  profilePictureUrl    String               @default("https://unavatar.now.sh/fallback.png")
  role                 UserRole             @default(USER)
  timezone             String               @default("America/Los_Angeles")
  twoFactorMethod      MfaMethod            @default(NONE)
  twoFactorPhone       String?
  twoFactorSecret      String?
  attributes           Json?
  updatedAt            DateTime             @updatedAt
  active               Boolean              @default(true)
  prefersEmail         Email?               @relation("userPrefersEmail", fields: [prefersEmailId], references: [id])
  apiKeys              ApiKey[]             @relation("userApiKey")
  approvedSubnets      ApprovedSubnet[]     @relation("userApprovedSubnet")
  auditLogs            AuditLog[]           @relation("userAuditLog")
  backupCodes          BackupCode[]         @relation("userBackupCode")
  emails               Email[]              @relation("userEmail")
  identities           Identity[]           @relation("userIdentity")
  transactions         Transaction[]        @relation("userTransactions")
  memberships          Membership[]         @relation("userMembership")
  sessions             Session[]            @relation("userSession")
  kyc                  KYC[]                @relation("userKYCDocuments")
  accounts             Account[]            @relation("userAccounts")
  devices              Device[]             @relation("userDevices")

  @@index([prefersEmailId], name: "prefersEmailId")
}

model Group {
  autoJoinDomain    Boolean      @default(false)
  createdAt         DateTime     @default(now())
  forceTwoFactor    Boolean      @default(false)
  id                Int          @id
  ipRestrictions    String?
  name              String
  onlyAllowDomain   Boolean      @default(false)
  profilePictureUrl String       @default("https://unavatar.now.sh/fallback.png")
  attributes        Json?
  updatedAt         DateTime     @updatedAt
  parentId          Int?
  parent            Group?       @relation("groupSubgroups", fields: [parentId], references: [id])
  apikeys           ApiKey[]     @relation("groupApiKey")
  auditLogs         AuditLog[]   @relation("groupAuditLog")
  domains           Domain[]     @relation("groupDomain")
  subgroups         Group[]      @relation("groupSubgroups")
  memberships       Membership[] @relation("groupMembership")
  webhooks          Webhook[]    @relation("groupWebhook")

  @@index([parentId], name: "parentId")
}

model Email {
  createdAt  DateTime @default(now())
  email      String   @unique
  emailSafe  String   @unique
  id         Int      @id @default(autoincrement())
  isVerified Boolean  @default(false)
  updatedAt  DateTime @updatedAt
  userId     Int
  user       User     @relation("userEmail", fields: [userId], references: [id])
  users      User[]   @relation("userPrefersEmail")

  @@index([userId], name: "userId")
}

model ApiKey {
  createdAt            DateTime   @default(now())
  description          String?
  id                   Int        @id @default(autoincrement())
  ipRestrictions       Json?
  apiKey               String     @unique
  name                 String?
  groupId              Int?
  referrerRestrictions Json?
  scopes               Json?
  updatedAt            DateTime   @updatedAt
  userId               Int?
  auditLogs            AuditLog[] @relation("apiKeyAuditLog")
  group                Group?     @relation("groupApiKey", fields: [groupId], references: [id])
  user                 User?      @relation("userApiKey", fields: [userId], references: [id])

  @@index([groupId], name: "groupId")
  @@index([userId], name: "userId")
}

model ApprovedSubnet {
  createdAt   DateTime @default(now())
  id          Int      @id @default(autoincrement())
  subnet      String
  city        String?
  region      String?
  timezone    String?
  countryCode String?
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation("userApprovedSubnet", fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model BackupCode {
  id        Int      @id @default(autoincrement())
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isUsed    Boolean  @default(false)
  userId    Int
  user      User     @relation("userBackupCode", fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model CouponCode {
  id               Int       @id @default(autoincrement())
  code             String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  expiresAt        DateTime?
  maxUses          Int       @default(1000)
  usedCount        Int       @default(0)
  teamRestrictions String?
  amount           Float     @default(0.00)
  currency         String
  description      String?
}

model Domain {
  createdAt        DateTime @default(now())
  domain           String
  id               Int      @id @default(autoincrement())
  isVerified       Boolean  @default(false)
  groupId          Int
  updatedAt        DateTime @updatedAt
  verificationCode String
  group            Group    @relation("groupDomain", fields: [groupId], references: [id])

  @@index([groupId], name: "groupId")
}

model Identity {
  createdAt DateTime     @default(now())
  id        Int          @id @default(autoincrement())
  loginName String
  type      IdentityType
  updatedAt DateTime     @updatedAt
  userId    Int
  user      User         @relation("userIdentity", fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model Membership {
  createdAt DateTime       @default(now())
  id        Int            @id @default(autoincrement())
  groupId   Int
  role      MembershipRole @default(MEMBER)
  updatedAt DateTime       @updatedAt
  userId    Int
  group     Group          @relation("groupMembership", fields: [groupId], references: [id])
  user      User           @relation("userMembership", fields: [userId], references: [id])

  @@index([groupId], name: "groupId")
  @@index([userId], name: "userId")
}

model Session {
  createdAt       DateTime @default(now())
  id              Int      @id @default(autoincrement())
  ipAddress       String
  token           String
  updatedAt       DateTime @updatedAt
  userAgent       String?
  city            String?
  region          String?
  timezone        String?
  countryCode     String?
  browser         String?
  operatingSystem String?
  userId          Int
  user            User     @relation("userSession", fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model Webhook {
  contentType String    @default("application/json")
  createdAt   DateTime  @default(now())
  event       String
  id          Int       @id @default(autoincrement())
  isActive    Boolean   @default(false)
  lastFiredAt DateTime?
  groupId     Int
  secret      String?
  updatedAt   DateTime  @updatedAt
  url         String
  group       Group     @relation("groupWebhook", fields: [groupId], references: [id])

  @@index([groupId], name: "groupId")
}

model AuditLog {
  createdAt       DateTime @default(now())
  event           String
  rawEvent        String
  id              Int      @id @default(autoincrement())
  groupId         Int?
  updatedAt       DateTime @updatedAt
  userId          Int?
  apiKeyId        Int?
  ipAddress       String?
  userAgent       String?
  city            String?
  region          String?
  timezone        String?
  countryCode     String?
  browser         String?
  operatingSystem String?
  group           Group?   @relation("groupAuditLog", fields: [groupId], references: [id])
  user            User?    @relation("userAuditLog", fields: [userId], references: [id])
  apiKey          ApiKey?  @relation("apiKeyAuditLog", fields: [apiKeyId], references: [id])

  @@index([apiKeyId], name: "apiKeyId")
  @@index([groupId], name: "groupId")
  @@index([userId], name: "userId")
}

enum Gender {
  MALE
  FEMALE
  NONBINARY
  UNKNOWN
}

enum NotificationEmail {
  ACCOUNT
  UPDATES
  PROMOTIONS
}

enum PrefersColorScheme {
  NO_PREFERENCE
  LIGHT
  DARK
}

enum PrefersReducedMotion {
  NO_PREFERENCE
  REDUCE
}

enum UserRole {
  SUDO
  USER
}

enum MfaMethod {
  NONE
  SMS
  TOTP
  EMAIL
}

enum MembershipRole {
  OWNER
  ADMIN
  MEMBER
}

enum IdentityType {
  GOOGLE
  APPLE
  SLACK
}

enum TransactionStatus {
  PENDING
  FAILED
  SUCCESSFUL
}

enum KYCStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DocumentType {
  DRIVER_LICENCE
  GOVERNMENT_ID
  PASSPORT
}

model Transaction {
  createdAt      DateTime          @default(now())
  id             Int               @id @default(autoincrement())
  updatedAt      DateTime          @updatedAt
  credit_account String?
  debit_account  String?
  label          String?
  type           String?
  subtype        String?
  amount         Int
  account        String?
  status         TransactionStatus
  messages       String?
  userId         Int
  currency       Json?
  metadata       Json?
  user           User              @relation("userTransactions", fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model KYC {
  createdAt      DateTime      @default(now())
  id             Int           @id @default(autoincrement())
  updatedAt      DateTime      @updatedAt
  expiresAt      DateTime      @updatedAt
  status         KYCStatus
  failure_reason String?
  documentUrl    String?
  userId         Int
  documentType   DocumentType?
  user           User          @relation("userKYCDocuments", fields: [userId], references: [id])

  @@index([userId], name: "userId")
}

model Device {
  createdAt   DateTime @default(now())
  id          Int      @id @default(autoincrement())
  updatedAt   DateTime @updatedAt
  deviceToken String?
  os          String?
  deviceName  String?
  version     String?
  metadata    Json?
  userId      Int
  user        User     @relation("userDevices", fields: [userId], references: [id])
}

model Currency {
  createdAt         DateTime  @default(now())
  id                Int       @id @default(autoincrement())
  updatedAt         DateTime  @updatedAt
  currency          Json
  balance           Int       @default(0)
  available_balance Int       @default(0)
  limits            Json?
  fees              Json?
  active            Boolean   @default(true)
  accounts          Account[] @relation("userCurrencies")

  archived Boolean?
}

model Account {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  name       String
  label      String?
  reference  String?
  definition String?
  primary    Boolean?
  userId     Int
  user       User?     @relation("userAccounts", fields: [userId], references: [id])
  currencyId Int
  currencies Currency? @relation("userCurrencies", fields: [currencyId], references: [id])
}
